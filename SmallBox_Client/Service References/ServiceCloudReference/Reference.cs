//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SmallBox_Client.ServiceCloudReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceCloudReference.IServiceCloud")]
    public interface IServiceCloud {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceCloud/CreateDirectoryStruct", ReplyAction="http://tempuri.org/IServiceCloud/CreateDirectoryStructResponse")]
        void CreateDirectoryStruct();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServiceCloud/CreateDirectoryStruct", ReplyAction="http://tempuri.org/IServiceCloud/CreateDirectoryStructResponse")]
        System.IAsyncResult BeginCreateDirectoryStruct(System.AsyncCallback callback, object asyncState);
        
        void EndCreateDirectoryStruct(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceCloud/GetContainerUri", ReplyAction="http://tempuri.org/IServiceCloud/GetContainerUriResponse")]
        string GetContainerUri();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServiceCloud/GetContainerUri", ReplyAction="http://tempuri.org/IServiceCloud/GetContainerUriResponse")]
        System.IAsyncResult BeginGetContainerUri(System.AsyncCallback callback, object asyncState);
        
        string EndGetContainerUri(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceCloud/GetDirectories", ReplyAction="http://tempuri.org/IServiceCloud/GetDirectoriesResponse")]
        WCFServiceCloud.Blobs[] GetDirectories();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServiceCloud/GetDirectories", ReplyAction="http://tempuri.org/IServiceCloud/GetDirectoriesResponse")]
        System.IAsyncResult BeginGetDirectories(System.AsyncCallback callback, object asyncState);
        
        WCFServiceCloud.Blobs[] EndGetDirectories(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceCloud/ListFilesInDir", ReplyAction="http://tempuri.org/IServiceCloud/ListFilesInDirResponse")]
        WCFServiceCloud.Blobs[] ListFilesInDir(string BlobRef);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServiceCloud/ListFilesInDir", ReplyAction="http://tempuri.org/IServiceCloud/ListFilesInDirResponse")]
        System.IAsyncResult BeginListFilesInDir(string BlobRef, System.AsyncCallback callback, object asyncState);
        
        WCFServiceCloud.Blobs[] EndListFilesInDir(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceCloud/uploadFileInBlob", ReplyAction="http://tempuri.org/IServiceCloud/uploadFileInBlobResponse")]
        void uploadFileInBlob(string sBlobRef, string sFileName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServiceCloud/uploadFileInBlob", ReplyAction="http://tempuri.org/IServiceCloud/uploadFileInBlobResponse")]
        System.IAsyncResult BeginuploadFileInBlob(string sBlobRef, string sFileName, System.AsyncCallback callback, object asyncState);
        
        void EnduploadFileInBlob(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceCloud/uploadFileFromStream", ReplyAction="http://tempuri.org/IServiceCloud/uploadFileFromStreamResponse")]
        void uploadFileFromStream(System.IO.Stream stream);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServiceCloud/uploadFileFromStream", ReplyAction="http://tempuri.org/IServiceCloud/uploadFileFromStreamResponse")]
        System.IAsyncResult BeginuploadFileFromStream(System.IO.Stream stream, System.AsyncCallback callback, object asyncState);
        
        void EnduploadFileFromStream(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceCloud/DownloadBlobAsStream", ReplyAction="http://tempuri.org/IServiceCloud/DownloadBlobAsStreamResponse")]
        System.IO.Stream DownloadBlobAsStream(string directoryName, string fileName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServiceCloud/DownloadBlobAsStream", ReplyAction="http://tempuri.org/IServiceCloud/DownloadBlobAsStreamResponse")]
        System.IAsyncResult BeginDownloadBlobAsStream(string directoryName, string fileName, System.AsyncCallback callback, object asyncState);
        
        System.IO.Stream EndDownloadBlobAsStream(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceCloudChannel : SmallBox_Client.ServiceCloudReference.IServiceCloud, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetContainerUriCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetContainerUriCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDirectoriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDirectoriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public WCFServiceCloud.Blobs[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((WCFServiceCloud.Blobs[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ListFilesInDirCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ListFilesInDirCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public WCFServiceCloud.Blobs[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((WCFServiceCloud.Blobs[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DownloadBlobAsStreamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DownloadBlobAsStreamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.IO.Stream Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.IO.Stream)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceCloudClient : System.ServiceModel.ClientBase<SmallBox_Client.ServiceCloudReference.IServiceCloud>, SmallBox_Client.ServiceCloudReference.IServiceCloud {
        
        private BeginOperationDelegate onBeginCreateDirectoryStructDelegate;
        
        private EndOperationDelegate onEndCreateDirectoryStructDelegate;
        
        private System.Threading.SendOrPostCallback onCreateDirectoryStructCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetContainerUriDelegate;
        
        private EndOperationDelegate onEndGetContainerUriDelegate;
        
        private System.Threading.SendOrPostCallback onGetContainerUriCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDirectoriesDelegate;
        
        private EndOperationDelegate onEndGetDirectoriesDelegate;
        
        private System.Threading.SendOrPostCallback onGetDirectoriesCompletedDelegate;
        
        private BeginOperationDelegate onBeginListFilesInDirDelegate;
        
        private EndOperationDelegate onEndListFilesInDirDelegate;
        
        private System.Threading.SendOrPostCallback onListFilesInDirCompletedDelegate;
        
        private BeginOperationDelegate onBeginuploadFileInBlobDelegate;
        
        private EndOperationDelegate onEnduploadFileInBlobDelegate;
        
        private System.Threading.SendOrPostCallback onuploadFileInBlobCompletedDelegate;
        
        private BeginOperationDelegate onBeginuploadFileFromStreamDelegate;
        
        private EndOperationDelegate onEnduploadFileFromStreamDelegate;
        
        private System.Threading.SendOrPostCallback onuploadFileFromStreamCompletedDelegate;
        
        private BeginOperationDelegate onBeginDownloadBlobAsStreamDelegate;
        
        private EndOperationDelegate onEndDownloadBlobAsStreamDelegate;
        
        private System.Threading.SendOrPostCallback onDownloadBlobAsStreamCompletedDelegate;
        
        public ServiceCloudClient() {
        }
        
        public ServiceCloudClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceCloudClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceCloudClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceCloudClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CreateDirectoryStructCompleted;
        
        public event System.EventHandler<GetContainerUriCompletedEventArgs> GetContainerUriCompleted;
        
        public event System.EventHandler<GetDirectoriesCompletedEventArgs> GetDirectoriesCompleted;
        
        public event System.EventHandler<ListFilesInDirCompletedEventArgs> ListFilesInDirCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> uploadFileInBlobCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> uploadFileFromStreamCompleted;
        
        public event System.EventHandler<DownloadBlobAsStreamCompletedEventArgs> DownloadBlobAsStreamCompleted;
        
        public void CreateDirectoryStruct() {
            base.Channel.CreateDirectoryStruct();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCreateDirectoryStruct(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateDirectoryStruct(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndCreateDirectoryStruct(System.IAsyncResult result) {
            base.Channel.EndCreateDirectoryStruct(result);
        }
        
        private System.IAsyncResult OnBeginCreateDirectoryStruct(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginCreateDirectoryStruct(callback, asyncState);
        }
        
        private object[] OnEndCreateDirectoryStruct(System.IAsyncResult result) {
            this.EndCreateDirectoryStruct(result);
            return null;
        }
        
        private void OnCreateDirectoryStructCompleted(object state) {
            if ((this.CreateDirectoryStructCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateDirectoryStructCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateDirectoryStructAsync() {
            this.CreateDirectoryStructAsync(null);
        }
        
        public void CreateDirectoryStructAsync(object userState) {
            if ((this.onBeginCreateDirectoryStructDelegate == null)) {
                this.onBeginCreateDirectoryStructDelegate = new BeginOperationDelegate(this.OnBeginCreateDirectoryStruct);
            }
            if ((this.onEndCreateDirectoryStructDelegate == null)) {
                this.onEndCreateDirectoryStructDelegate = new EndOperationDelegate(this.OnEndCreateDirectoryStruct);
            }
            if ((this.onCreateDirectoryStructCompletedDelegate == null)) {
                this.onCreateDirectoryStructCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateDirectoryStructCompleted);
            }
            base.InvokeAsync(this.onBeginCreateDirectoryStructDelegate, null, this.onEndCreateDirectoryStructDelegate, this.onCreateDirectoryStructCompletedDelegate, userState);
        }
        
        public string GetContainerUri() {
            return base.Channel.GetContainerUri();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetContainerUri(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetContainerUri(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetContainerUri(System.IAsyncResult result) {
            return base.Channel.EndGetContainerUri(result);
        }
        
        private System.IAsyncResult OnBeginGetContainerUri(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetContainerUri(callback, asyncState);
        }
        
        private object[] OnEndGetContainerUri(System.IAsyncResult result) {
            string retVal = this.EndGetContainerUri(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetContainerUriCompleted(object state) {
            if ((this.GetContainerUriCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetContainerUriCompleted(this, new GetContainerUriCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetContainerUriAsync() {
            this.GetContainerUriAsync(null);
        }
        
        public void GetContainerUriAsync(object userState) {
            if ((this.onBeginGetContainerUriDelegate == null)) {
                this.onBeginGetContainerUriDelegate = new BeginOperationDelegate(this.OnBeginGetContainerUri);
            }
            if ((this.onEndGetContainerUriDelegate == null)) {
                this.onEndGetContainerUriDelegate = new EndOperationDelegate(this.OnEndGetContainerUri);
            }
            if ((this.onGetContainerUriCompletedDelegate == null)) {
                this.onGetContainerUriCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetContainerUriCompleted);
            }
            base.InvokeAsync(this.onBeginGetContainerUriDelegate, null, this.onEndGetContainerUriDelegate, this.onGetContainerUriCompletedDelegate, userState);
        }
        
        public WCFServiceCloud.Blobs[] GetDirectories() {
            return base.Channel.GetDirectories();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetDirectories(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDirectories(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public WCFServiceCloud.Blobs[] EndGetDirectories(System.IAsyncResult result) {
            return base.Channel.EndGetDirectories(result);
        }
        
        private System.IAsyncResult OnBeginGetDirectories(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetDirectories(callback, asyncState);
        }
        
        private object[] OnEndGetDirectories(System.IAsyncResult result) {
            WCFServiceCloud.Blobs[] retVal = this.EndGetDirectories(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDirectoriesCompleted(object state) {
            if ((this.GetDirectoriesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDirectoriesCompleted(this, new GetDirectoriesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDirectoriesAsync() {
            this.GetDirectoriesAsync(null);
        }
        
        public void GetDirectoriesAsync(object userState) {
            if ((this.onBeginGetDirectoriesDelegate == null)) {
                this.onBeginGetDirectoriesDelegate = new BeginOperationDelegate(this.OnBeginGetDirectories);
            }
            if ((this.onEndGetDirectoriesDelegate == null)) {
                this.onEndGetDirectoriesDelegate = new EndOperationDelegate(this.OnEndGetDirectories);
            }
            if ((this.onGetDirectoriesCompletedDelegate == null)) {
                this.onGetDirectoriesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDirectoriesCompleted);
            }
            base.InvokeAsync(this.onBeginGetDirectoriesDelegate, null, this.onEndGetDirectoriesDelegate, this.onGetDirectoriesCompletedDelegate, userState);
        }
        
        public WCFServiceCloud.Blobs[] ListFilesInDir(string BlobRef) {
            return base.Channel.ListFilesInDir(BlobRef);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginListFilesInDir(string BlobRef, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginListFilesInDir(BlobRef, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public WCFServiceCloud.Blobs[] EndListFilesInDir(System.IAsyncResult result) {
            return base.Channel.EndListFilesInDir(result);
        }
        
        private System.IAsyncResult OnBeginListFilesInDir(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string BlobRef = ((string)(inValues[0]));
            return this.BeginListFilesInDir(BlobRef, callback, asyncState);
        }
        
        private object[] OnEndListFilesInDir(System.IAsyncResult result) {
            WCFServiceCloud.Blobs[] retVal = this.EndListFilesInDir(result);
            return new object[] {
                    retVal};
        }
        
        private void OnListFilesInDirCompleted(object state) {
            if ((this.ListFilesInDirCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ListFilesInDirCompleted(this, new ListFilesInDirCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ListFilesInDirAsync(string BlobRef) {
            this.ListFilesInDirAsync(BlobRef, null);
        }
        
        public void ListFilesInDirAsync(string BlobRef, object userState) {
            if ((this.onBeginListFilesInDirDelegate == null)) {
                this.onBeginListFilesInDirDelegate = new BeginOperationDelegate(this.OnBeginListFilesInDir);
            }
            if ((this.onEndListFilesInDirDelegate == null)) {
                this.onEndListFilesInDirDelegate = new EndOperationDelegate(this.OnEndListFilesInDir);
            }
            if ((this.onListFilesInDirCompletedDelegate == null)) {
                this.onListFilesInDirCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnListFilesInDirCompleted);
            }
            base.InvokeAsync(this.onBeginListFilesInDirDelegate, new object[] {
                        BlobRef}, this.onEndListFilesInDirDelegate, this.onListFilesInDirCompletedDelegate, userState);
        }
        
        public void uploadFileInBlob(string sBlobRef, string sFileName) {
            base.Channel.uploadFileInBlob(sBlobRef, sFileName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginuploadFileInBlob(string sBlobRef, string sFileName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginuploadFileInBlob(sBlobRef, sFileName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EnduploadFileInBlob(System.IAsyncResult result) {
            base.Channel.EnduploadFileInBlob(result);
        }
        
        private System.IAsyncResult OnBeginuploadFileInBlob(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sBlobRef = ((string)(inValues[0]));
            string sFileName = ((string)(inValues[1]));
            return this.BeginuploadFileInBlob(sBlobRef, sFileName, callback, asyncState);
        }
        
        private object[] OnEnduploadFileInBlob(System.IAsyncResult result) {
            this.EnduploadFileInBlob(result);
            return null;
        }
        
        private void OnuploadFileInBlobCompleted(object state) {
            if ((this.uploadFileInBlobCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.uploadFileInBlobCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void uploadFileInBlobAsync(string sBlobRef, string sFileName) {
            this.uploadFileInBlobAsync(sBlobRef, sFileName, null);
        }
        
        public void uploadFileInBlobAsync(string sBlobRef, string sFileName, object userState) {
            if ((this.onBeginuploadFileInBlobDelegate == null)) {
                this.onBeginuploadFileInBlobDelegate = new BeginOperationDelegate(this.OnBeginuploadFileInBlob);
            }
            if ((this.onEnduploadFileInBlobDelegate == null)) {
                this.onEnduploadFileInBlobDelegate = new EndOperationDelegate(this.OnEnduploadFileInBlob);
            }
            if ((this.onuploadFileInBlobCompletedDelegate == null)) {
                this.onuploadFileInBlobCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnuploadFileInBlobCompleted);
            }
            base.InvokeAsync(this.onBeginuploadFileInBlobDelegate, new object[] {
                        sBlobRef,
                        sFileName}, this.onEnduploadFileInBlobDelegate, this.onuploadFileInBlobCompletedDelegate, userState);
        }
        
        public void uploadFileFromStream(System.IO.Stream stream) {
            base.Channel.uploadFileFromStream(stream);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginuploadFileFromStream(System.IO.Stream stream, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginuploadFileFromStream(stream, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EnduploadFileFromStream(System.IAsyncResult result) {
            base.Channel.EnduploadFileFromStream(result);
        }
        
        private System.IAsyncResult OnBeginuploadFileFromStream(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.IO.Stream stream = ((System.IO.Stream)(inValues[0]));
            return this.BeginuploadFileFromStream(stream, callback, asyncState);
        }
        
        private object[] OnEnduploadFileFromStream(System.IAsyncResult result) {
            this.EnduploadFileFromStream(result);
            return null;
        }
        
        private void OnuploadFileFromStreamCompleted(object state) {
            if ((this.uploadFileFromStreamCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.uploadFileFromStreamCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void uploadFileFromStreamAsync(System.IO.Stream stream) {
            this.uploadFileFromStreamAsync(stream, null);
        }
        
        public void uploadFileFromStreamAsync(System.IO.Stream stream, object userState) {
            if ((this.onBeginuploadFileFromStreamDelegate == null)) {
                this.onBeginuploadFileFromStreamDelegate = new BeginOperationDelegate(this.OnBeginuploadFileFromStream);
            }
            if ((this.onEnduploadFileFromStreamDelegate == null)) {
                this.onEnduploadFileFromStreamDelegate = new EndOperationDelegate(this.OnEnduploadFileFromStream);
            }
            if ((this.onuploadFileFromStreamCompletedDelegate == null)) {
                this.onuploadFileFromStreamCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnuploadFileFromStreamCompleted);
            }
            base.InvokeAsync(this.onBeginuploadFileFromStreamDelegate, new object[] {
                        stream}, this.onEnduploadFileFromStreamDelegate, this.onuploadFileFromStreamCompletedDelegate, userState);
        }
        
        public System.IO.Stream DownloadBlobAsStream(string directoryName, string fileName) {
            return base.Channel.DownloadBlobAsStream(directoryName, fileName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDownloadBlobAsStream(string directoryName, string fileName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDownloadBlobAsStream(directoryName, fileName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IO.Stream EndDownloadBlobAsStream(System.IAsyncResult result) {
            return base.Channel.EndDownloadBlobAsStream(result);
        }
        
        private System.IAsyncResult OnBeginDownloadBlobAsStream(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string directoryName = ((string)(inValues[0]));
            string fileName = ((string)(inValues[1]));
            return this.BeginDownloadBlobAsStream(directoryName, fileName, callback, asyncState);
        }
        
        private object[] OnEndDownloadBlobAsStream(System.IAsyncResult result) {
            System.IO.Stream retVal = this.EndDownloadBlobAsStream(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDownloadBlobAsStreamCompleted(object state) {
            if ((this.DownloadBlobAsStreamCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DownloadBlobAsStreamCompleted(this, new DownloadBlobAsStreamCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DownloadBlobAsStreamAsync(string directoryName, string fileName) {
            this.DownloadBlobAsStreamAsync(directoryName, fileName, null);
        }
        
        public void DownloadBlobAsStreamAsync(string directoryName, string fileName, object userState) {
            if ((this.onBeginDownloadBlobAsStreamDelegate == null)) {
                this.onBeginDownloadBlobAsStreamDelegate = new BeginOperationDelegate(this.OnBeginDownloadBlobAsStream);
            }
            if ((this.onEndDownloadBlobAsStreamDelegate == null)) {
                this.onEndDownloadBlobAsStreamDelegate = new EndOperationDelegate(this.OnEndDownloadBlobAsStream);
            }
            if ((this.onDownloadBlobAsStreamCompletedDelegate == null)) {
                this.onDownloadBlobAsStreamCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDownloadBlobAsStreamCompleted);
            }
            base.InvokeAsync(this.onBeginDownloadBlobAsStreamDelegate, new object[] {
                        directoryName,
                        fileName}, this.onEndDownloadBlobAsStreamDelegate, this.onDownloadBlobAsStreamCompletedDelegate, userState);
        }
    }
}
